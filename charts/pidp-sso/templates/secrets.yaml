apiVersion: v1
kind: Secret
metadata:
  name: {{ include "sso.fullname" . }}-keycloak-secrets
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-%s" ( include "sso.fullname" $) "keycloak-secrets-sso")) | default dict }}
    {{- $secretData := (get $secretObj "keycloak-admin-password") | default dict }}
    {{- $secretUser := (get $secretObj "keycloak-admin-user") | default dict }}

    # set $jwtSecret to existing secret data or generate a random one when not exists
    {{- $passwordSecret := (get $secretData "keycloak-admin-password") | default (randAlphaNum 32 | b64enc) }}
    {{- $userSecret := (get $secretData "keycloak-admin-user") | default (randAlphaNum 7 | b64enc) }}

    keycloak-admin-password: {{ $passwordSecret | quote }}
    keycloak-admin-user: {{ $userSecret | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "sso.fullname" . }}-jgroups
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "sso-jgroups-test") | default dict }}
    {{- $secretData := (get $secretObj "password") | default dict }}
    # set $jwtSecret to existing secret data or generate a random one when not exists
    {{- $passwordSecret := (get $secretData "password") | default (randAlphaNum 32 | b64enc) }}
    password: {{ $passwordSecret | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "sso.fullname" . }}-postgres
type: Opaque
data:
    {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-%s" ( include "sso.fullname" $) "-postgres")) | default dict }}
    {{- $secretData := (get $secretObj "password") | default dict }}
    {{- $secretPostgresData := (get $secretObj "postgres-password") | default dict }}

    # set $jwtSecret to existing secret data or generate a random one when not exists
    {{- $passwordSecret := (get $secretData "password") | default (randAlphaNum 32 | b64enc) }}
    {{- $postgresPasswordSecret := (get $secretData "postgres-password") | default (randAlphaNum 32 | b64enc) }}
    postgres-password: {{ $postgresPasswordSecret | quote }}
    password: {{ $passwordSecret | quote }}
