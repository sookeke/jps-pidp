apiVersion: v1
kind: Secret
metadata:
  name: "keycloak-secrets"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "keycloak-secret") | default dict }}
    {{- $secretData := (get $secretObj "keycloak-admin-password") | default dict }}
    {{- $secretUser := (get $secretObj "keycloak-admin-user") | default dict }}

    # set $jwtSecret to existing secret data or generate a random one when not exists
    {{- $passwordSecret := (get $secretData "keycloak-admin-password") | default (randAlphaNum 32 | b64enc) }}
    {{- $userSecret := (get $secretData "keycloak-admin-user") | default (randAlphaNum 7 | b64enc) }}

    keycloak-admin-password: {{ $passwordSecret | quote }}
    keycloak-admin-user: {{ $userSecret | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "sso-jgroups-test"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "sso-jgroups-test") | default dict }}
    {{- $secretData := (get $secretObj "password") | default dict }}
    # set $jwtSecret to existing secret data or generate a random one when not exists
    {{- $passwordSecret := (get $secretData "password") | default (randAlphaNum 32 | b64enc) }}
    password: {{ $passwordSecret | quote }}
