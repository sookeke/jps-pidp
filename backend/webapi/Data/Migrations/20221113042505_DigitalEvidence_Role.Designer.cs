// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pidp.Data;

#nullable disable

namespace Pidp.Data.Migrations
{
    [DbContext(typeof(PidpDbContext))]
    [Migration("20221113042505_DigitalEvidence_Role")]
    partial class DigitalEvidence_Role
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pidp.Models.AccessRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTypeCode")
                        .HasColumnType("integer");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<Instant>("RequestedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("AccessRequest");
                });

            modelBuilder.Entity("Pidp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Address");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Address");
                });

            modelBuilder.Entity("Pidp.Models.ClientLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ClientLog");
                });

            modelBuilder.Entity("Pidp.Models.CorrectionServiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorrectionServiceCode")
                        .HasColumnType("integer");

                    b.Property<int>("OrgainizationDetailId")
                        .HasColumnType("integer");

                    b.Property<string>("PeronalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CorrectionServiceCode");

                    b.HasIndex("OrgainizationDetailId");

                    b.ToTable("CorrectionServiceDetails");
                });

            modelBuilder.Entity("Pidp.Models.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatestStatus")
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MsgId")
                        .HasColumnType("uuid");

                    b.Property<string>("SendType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdateCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("Pidp.Models.Endorsement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Endorsement");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndorsementId")
                        .HasColumnType("integer");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndorsementId");

                    b.HasIndex("PartyId");

                    b.ToTable("EndorsementRelationship");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReceivingPartyId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestingPartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Instant>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingPartyId");

                    b.HasIndex("RequestingPartyId");

                    b.ToTable("EndorsementRequest");
                });

            modelBuilder.Entity("Pidp.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Pidp.Models.JusticeSectorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("JusticeSectorCode")
                        .HasColumnType("integer");

                    b.Property<string>("JustinUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrgainizationDetailId")
                        .HasColumnType("integer");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JusticeSectorCode");

                    b.HasIndex("OrgainizationDetailId");

                    b.ToTable("JusticeSectorDetail");
                });

            modelBuilder.Entity("Pidp.Models.Lookups.AccessType", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("AccessTypeLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "Special Authority eForms"
                        },
                        new
                        {
                            Code = 2,
                            Name = "HCIMWeb Account Transfer"
                        },
                        new
                        {
                            Code = 3,
                            Name = "HCIMWeb Enrolment"
                        },
                        new
                        {
                            Code = 4,
                            Name = "Driver Medical Fitness"
                        },
                        new
                        {
                            Code = 5,
                            Name = "Digital Evidence Management"
                        },
                        new
                        {
                            Code = 6,
                            Name = "Fraser Health UCI"
                        },
                        new
                        {
                            Code = 7,
                            Name = "MS Teams for Clinical Use"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.College", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("CollegeLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Acronym = "CPSBC",
                            Name = "College of Physicians and Surgeons of BC"
                        },
                        new
                        {
                            Code = 2,
                            Acronym = "CPBC",
                            Name = "College of Pharmacists of BC"
                        },
                        new
                        {
                            Code = 3,
                            Acronym = "BCCNM",
                            Name = "BC College of Nurses and Midwives"
                        },
                        new
                        {
                            Code = 4,
                            Acronym = "CNPBC",
                            Name = "College of Naturopathic Physicians of BC"
                        },
                        new
                        {
                            Code = 5,
                            Acronym = "CDSBC",
                            Name = "College of Dental Surgeons of British Columbia"
                        },
                        new
                        {
                            Code = 6,
                            Acronym = "COBC",
                            Name = "College of Optometrists of British Columbia"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.CorrectionService", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("CorrectionServiceLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "In Custody"
                        },
                        new
                        {
                            Code = 2,
                            Name = "Out Of Custody"
                        },
                        new
                        {
                            Code = 3,
                            Name = "In and Out Of Custody"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("CountryLookup");

                    b.HasData(
                        new
                        {
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Code = "US",
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.CrownRegion", b =>
                {
                    b.Property<string>("AgencyCode")
                        .HasColumnType("text");

                    b.Property<string>("CrownLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgencyCode");

                    b.ToTable("CrownRegionLookup");

                    b.HasData(
                        new
                        {
                            AgencyCode = "C109",
                            CrownLocation = "Campbell River Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C104",
                            CrownLocation = "Courtenay Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C106",
                            CrownLocation = "Duncan Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C105",
                            CrownLocation = "Nanaimo Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C107",
                            CrownLocation = "Parksville (do not use) Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C108",
                            CrownLocation = "Port Alberni Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C604",
                            CrownLocation = "Port Hardy Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C110",
                            CrownLocation = "Powell River Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C111",
                            CrownLocation = "Sidney Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C101",
                            CrownLocation = "Victoria Regional Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C102",
                            CrownLocation = "Victoria Youth Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "C103",
                            CrownLocation = "Western Communities Crown Counsel",
                            RegionId = 1,
                            RegionName = "Vancouver Island Region"
                        },
                        new
                        {
                            AgencyCode = "BBCR",
                            CrownLocation = "Bella Bella Provincial Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "BCCR",
                            CrownLocation = "Bella Coola Provincial Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C303",
                            CrownLocation = "Burnaby Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "889",
                            CrownLocation = "Downtown Community Crown (Prov)",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "KLCR",
                            CrownLocation = "Klemtu Provincial Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C205",
                            CrownLocation = "North Vancouver Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "PEMB",
                            CrownLocation = "Pemberton Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C207",
                            CrownLocation = "Richmond Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C208",
                            CrownLocation = "Sechelt Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C209",
                            CrownLocation = "Squamish Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "205",
                            CrownLocation = "Vancouver Provincial Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C201",
                            CrownLocation = "Vancouver Regional Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C203",
                            CrownLocation = "Vancouver Traffic Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C204",
                            CrownLocation = "Vancouver Youth Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C206",
                            CrownLocation = "West Vancouver Crown Counsel",
                            RegionId = 2,
                            RegionName = "Vancouver Region"
                        },
                        new
                        {
                            AgencyCode = "C305",
                            CrownLocation = "Abbotsford Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C304",
                            CrownLocation = "Chilliwack Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C306",
                            CrownLocation = "Delta (Do Not Use) Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C307",
                            CrownLocation = "Hope Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C308",
                            CrownLocation = "Langley (Do Not Use) Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C309",
                            CrownLocation = "Maple Ridge Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C302",
                            CrownLocation = "New Westminster Provincial Crown",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C301",
                            CrownLocation = "New Westminster Regional Crown",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C310",
                            CrownLocation = "Port Coquitlam Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C311",
                            CrownLocation = "Surrey Crown Counsel",
                            RegionId = 3,
                            RegionName = "Fraser Region"
                        },
                        new
                        {
                            AgencyCode = "C405",
                            CrownLocation = "Cranbrook Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "C401",
                            CrownLocation = "Kamloops Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "kelo",
                            CrownLocation = "Kelowna Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "C406",
                            CrownLocation = "Nelson Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "C403",
                            CrownLocation = "Penticton Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "SACC",
                            CrownLocation = "Salmon Arm Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "C404",
                            CrownLocation = "Vernon Crown Counsel",
                            RegionId = 4,
                            RegionName = "Interior Region"
                        },
                        new
                        {
                            AgencyCode = "HUNM",
                            CrownLocation = "100 Mile House Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C502",
                            CrownLocation = "Dawson Creek Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "FNEL",
                            CrownLocation = "Fort Nelson Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C503",
                            CrownLocation = "Fort St John Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C501",
                            CrownLocation = "Prince George Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C504",
                            CrownLocation = "Prince Rupert Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C505",
                            CrownLocation = "Quesnel Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C506",
                            CrownLocation = "Smithers Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C507",
                            CrownLocation = "Terrace Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C508",
                            CrownLocation = "Vanderhoof Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "C509",
                            CrownLocation = "Williams Lake Crown Counsel",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "ATT",
                            CrownLocation = "Auto Theft Task Force Crown Counsel",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "C602",
                            CrownLocation = "CJB Headquarters - Vancouver",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "C601",
                            CrownLocation = "CJB Headquarters - Victoria",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "C603",
                            CrownLocation = "CJB Special Prosecutions",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "CCA5",
                            CrownLocation = "Centralized Charge Assessment Pilot - Region 5",
                            RegionId = 5,
                            RegionName = "Northern Region"
                        },
                        new
                        {
                            AgencyCode = "6013",
                            CrownLocation = "Commercial Crime Crown Counsel",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "CJHQ",
                            CrownLocation = "Criminal Justice Headquarters - RM",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "HEF",
                            CrownLocation = "Health Fraud Crown Counsel",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "ICF",
                            CrownLocation = "ICBC Fraud Crown Counsel",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "PRC",
                            CrownLocation = "Proceeds of Crime Crown Counsel",
                            RegionId = 0,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "WEF",
                            CrownLocation = "Welfare Fraud Crown Counsel",
                            RegionId = 6,
                            RegionName = "CASP"
                        },
                        new
                        {
                            AgencyCode = "WOC",
                            CrownLocation = "Workers Compensation Crown Counsel",
                            RegionId = 6,
                            RegionName = "CASP"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.HealthAuthority", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("HealthAuthorityLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "Provincial Health Services Authority"
                        },
                        new
                        {
                            Code = 2,
                            Name = "Vancouver Island Health Authority"
                        },
                        new
                        {
                            Code = 3,
                            Name = "Vancouver Coastal Health Authority"
                        },
                        new
                        {
                            Code = 4,
                            Name = "Fraser Health Authority"
                        },
                        new
                        {
                            Code = 5,
                            Name = "Interior Health Authority"
                        },
                        new
                        {
                            Code = 6,
                            Name = "Northern Health Authority"
                        },
                        new
                        {
                            Code = 7,
                            Name = "First Nations Health Authority"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.JusticeSector", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("JusticeSectorLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "BC Prosecution Service"
                        },
                        new
                        {
                            Code = 2,
                            Name = "Road Safety BC"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.LawEnforcement", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("LawEnforcementLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "Royal Canadian Mounted Police"
                        },
                        new
                        {
                            Code = 2,
                            Name = "Victoria Police Department"
                        },
                        new
                        {
                            Code = 3,
                            Name = "Sannich Police Department"
                        },
                        new
                        {
                            Code = 4,
                            Name = "Delta Police Departmemt"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.LawSociety", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("LawSocietyLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "BC Law Society"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.Organization", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("OrganizationLookup");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Name = "Justice Sector"
                        },
                        new
                        {
                            Code = 2,
                            Name = "BC Law Enforcement"
                        },
                        new
                        {
                            Code = 3,
                            Name = "BC Law Society"
                        },
                        new
                        {
                            Code = 4,
                            Name = "BC Corrections Service"
                        },
                        new
                        {
                            Code = 5,
                            Name = "Health Authority"
                        },
                        new
                        {
                            Code = 6,
                            Name = "BC Government Ministry"
                        },
                        new
                        {
                            Code = 7,
                            Name = "ICBC"
                        },
                        new
                        {
                            Code = 8,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Pidp.Models.Lookups.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("ProvinceLookup");

                    b.HasData(
                        new
                        {
                            Code = "AB",
                            CountryCode = "CA",
                            Name = "Alberta"
                        },
                        new
                        {
                            Code = "BC",
                            CountryCode = "CA",
                            Name = "British Columbia"
                        },
                        new
                        {
                            Code = "MB",
                            CountryCode = "CA",
                            Name = "Manitoba"
                        },
                        new
                        {
                            Code = "NB",
                            CountryCode = "CA",
                            Name = "New Brunswick"
                        },
                        new
                        {
                            Code = "NL",
                            CountryCode = "CA",
                            Name = "Newfoundland and Labrador"
                        },
                        new
                        {
                            Code = "NS",
                            CountryCode = "CA",
                            Name = "Nova Scotia"
                        },
                        new
                        {
                            Code = "ON",
                            CountryCode = "CA",
                            Name = "Ontario"
                        },
                        new
                        {
                            Code = "PE",
                            CountryCode = "CA",
                            Name = "Prince Edward Island"
                        },
                        new
                        {
                            Code = "QC",
                            CountryCode = "CA",
                            Name = "Quebec"
                        },
                        new
                        {
                            Code = "SK",
                            CountryCode = "CA",
                            Name = "Saskatchewan"
                        },
                        new
                        {
                            Code = "NT",
                            CountryCode = "CA",
                            Name = "Northwest Territories"
                        },
                        new
                        {
                            Code = "NU",
                            CountryCode = "CA",
                            Name = "Nunavut"
                        },
                        new
                        {
                            Code = "YT",
                            CountryCode = "CA",
                            Name = "Yukon"
                        },
                        new
                        {
                            Code = "AL",
                            CountryCode = "US",
                            Name = "Alabama"
                        },
                        new
                        {
                            Code = "AK",
                            CountryCode = "US",
                            Name = "Alaska"
                        },
                        new
                        {
                            Code = "AS",
                            CountryCode = "US",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Code = "AZ",
                            CountryCode = "US",
                            Name = "Arizona"
                        },
                        new
                        {
                            Code = "AR",
                            CountryCode = "US",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Code = "CA",
                            CountryCode = "US",
                            Name = "California"
                        },
                        new
                        {
                            Code = "CO",
                            CountryCode = "US",
                            Name = "Colorado"
                        },
                        new
                        {
                            Code = "CT",
                            CountryCode = "US",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Code = "DE",
                            CountryCode = "US",
                            Name = "Delaware"
                        },
                        new
                        {
                            Code = "DC",
                            CountryCode = "US",
                            Name = "District of Columbia"
                        },
                        new
                        {
                            Code = "FL",
                            CountryCode = "US",
                            Name = "Florida"
                        },
                        new
                        {
                            Code = "GA",
                            CountryCode = "US",
                            Name = "Georgia"
                        },
                        new
                        {
                            Code = "GU",
                            CountryCode = "US",
                            Name = "Guam"
                        },
                        new
                        {
                            Code = "HI",
                            CountryCode = "US",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Code = "ID",
                            CountryCode = "US",
                            Name = "Idaho"
                        },
                        new
                        {
                            Code = "IL",
                            CountryCode = "US",
                            Name = "Illinois"
                        },
                        new
                        {
                            Code = "IN",
                            CountryCode = "US",
                            Name = "Indiana"
                        },
                        new
                        {
                            Code = "IA",
                            CountryCode = "US",
                            Name = "Iowa"
                        },
                        new
                        {
                            Code = "KS",
                            CountryCode = "US",
                            Name = "Kansas"
                        },
                        new
                        {
                            Code = "KY",
                            CountryCode = "US",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Code = "LA",
                            CountryCode = "US",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Code = "ME",
                            CountryCode = "US",
                            Name = "Maine"
                        },
                        new
                        {
                            Code = "MD",
                            CountryCode = "US",
                            Name = "Maryland"
                        },
                        new
                        {
                            Code = "MA",
                            CountryCode = "US",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Code = "MI",
                            CountryCode = "US",
                            Name = "Michigan"
                        },
                        new
                        {
                            Code = "MN",
                            CountryCode = "US",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Code = "MS",
                            CountryCode = "US",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Code = "MO",
                            CountryCode = "US",
                            Name = "Missouri"
                        },
                        new
                        {
                            Code = "MT",
                            CountryCode = "US",
                            Name = "Montana"
                        },
                        new
                        {
                            Code = "NE",
                            CountryCode = "US",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Code = "NV",
                            CountryCode = "US",
                            Name = "Nevada"
                        },
                        new
                        {
                            Code = "NH",
                            CountryCode = "US",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Code = "NJ",
                            CountryCode = "US",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Code = "NM",
                            CountryCode = "US",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Code = "NY",
                            CountryCode = "US",
                            Name = "New York"
                        },
                        new
                        {
                            Code = "NC",
                            CountryCode = "US",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Code = "ND",
                            CountryCode = "US",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Code = "MP",
                            CountryCode = "US",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Code = "OH",
                            CountryCode = "US",
                            Name = "Ohio"
                        },
                        new
                        {
                            Code = "OK",
                            CountryCode = "US",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Code = "OR",
                            CountryCode = "US",
                            Name = "Oregon"
                        },
                        new
                        {
                            Code = "PA",
                            CountryCode = "US",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Code = "PR",
                            CountryCode = "US",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Code = "RI",
                            CountryCode = "US",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Code = "SC",
                            CountryCode = "US",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Code = "SD",
                            CountryCode = "US",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Code = "TN",
                            CountryCode = "US",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Code = "TX",
                            CountryCode = "US",
                            Name = "Texas"
                        },
                        new
                        {
                            Code = "UM",
                            CountryCode = "US",
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Code = "UT",
                            CountryCode = "US",
                            Name = "Utah"
                        },
                        new
                        {
                            Code = "VT",
                            CountryCode = "US",
                            Name = "Vermont"
                        },
                        new
                        {
                            Code = "VI",
                            CountryCode = "US",
                            Name = "Virgin Islands, U.S."
                        },
                        new
                        {
                            Code = "VA",
                            CountryCode = "US",
                            Name = "Virginia"
                        },
                        new
                        {
                            Code = "WA",
                            CountryCode = "US",
                            Name = "Washington"
                        },
                        new
                        {
                            Code = "WV",
                            CountryCode = "US",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Code = "WI",
                            CountryCode = "US",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Code = "WY",
                            CountryCode = "US",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Pidp.Models.OutBoxEvent.ExportedEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("AggregateId")
                        .HasColumnType("text");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JsonEventPayload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EventPayload");

                    b.HasKey("EventId", "AggregateId");

                    b.ToTable("OutBoxedExportedEvent", (string)null);
                });

            modelBuilder.Entity("Pidp.Models.OutBoxEvent.IdempotentConsumer", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("Consumer")
                        .HasColumnType("text");

                    b.HasKey("MessageId", "Consumer");

                    b.ToTable("IdempotentConsumers", (string)null);
                });

            modelBuilder.Entity("Pidp.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<LocalDate?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Cpn")
                        .HasColumnType("text");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("Jpdid")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PreferredFirstName")
                        .HasColumnType("text");

                    b.Property<string>("PreferredLastName")
                        .HasColumnType("text");

                    b.Property<string>("PreferredMiddleName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Jpdid")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Party");
                });

            modelBuilder.Entity("Pidp.Models.PartyAccessAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("PartyAccessAdministrator");
                });

            modelBuilder.Entity("Pidp.Models.PartyLicenceDeclaration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CollegeCode")
                        .HasColumnType("integer");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenceNumber")
                        .HasColumnType("text");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollegeCode");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("PartyLicenceDeclaration");
                });

            modelBuilder.Entity("Pidp.Models.PartyOrgainizationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationCode")
                        .HasColumnType("integer");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationCode");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("PartyOrgainizationDetail");
                });

            modelBuilder.Entity("Pidp.Models.DigitalEvidence", b =>
                {
                    b.HasBaseType("Pidp.Models.AccessRequest");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("DigitalEvidence");
                });

            modelBuilder.Entity("Pidp.Models.FacilityAddress", b =>
                {
                    b.HasBaseType("Pidp.Models.Address");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer");

                    b.HasIndex("FacilityId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("FacilityAddress");
                });

            modelBuilder.Entity("Pidp.Models.HcimAccountTransfer", b =>
                {
                    b.HasBaseType("Pidp.Models.AccessRequest");

                    b.Property<string>("LdapUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("HcimAccountTransfer");
                });

            modelBuilder.Entity("Pidp.Models.HcimEnrolment", b =>
                {
                    b.HasBaseType("Pidp.Models.AccessRequest");

                    b.Property<bool>("ManagesTasks")
                        .HasColumnType("boolean");

                    b.Property<bool>("ModifiesPhns")
                        .HasColumnType("boolean");

                    b.Property<bool>("RecordsNewborns")
                        .HasColumnType("boolean");

                    b.Property<bool>("SearchesIdentifiers")
                        .HasColumnType("boolean");

                    b.ToTable("HcimEnrolment");
                });

            modelBuilder.Entity("Pidp.Models.AccessRequest", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany("AccessRequests")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.Address", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.Lookups.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Pidp.Models.CorrectionServiceDetail", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.CorrectionService", "CorrectionService")
                        .WithMany()
                        .HasForeignKey("CorrectionServiceCode");

                    b.HasOne("Pidp.Models.PartyOrgainizationDetail", "OrgainizationDetail")
                        .WithMany()
                        .HasForeignKey("OrgainizationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectionService");

                    b.Navigation("OrgainizationDetail");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRelationship", b =>
                {
                    b.HasOne("Pidp.Models.Endorsement", "Endorsement")
                        .WithMany("EndorsementRelationships")
                        .HasForeignKey("EndorsementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endorsement");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.EndorsementRequest", b =>
                {
                    b.HasOne("Pidp.Models.Party", "ReceivingParty")
                        .WithMany()
                        .HasForeignKey("ReceivingPartyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pidp.Models.Party", "RequestingParty")
                        .WithMany()
                        .HasForeignKey("RequestingPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingParty");

                    b.Navigation("RequestingParty");
                });

            modelBuilder.Entity("Pidp.Models.Facility", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithOne("Facility")
                        .HasForeignKey("Pidp.Models.Facility", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.JusticeSectorDetail", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.JusticeSector", "JusticeSector")
                        .WithMany()
                        .HasForeignKey("JusticeSectorCode");

                    b.HasOne("Pidp.Models.PartyOrgainizationDetail", "OrgainizationDetail")
                        .WithMany()
                        .HasForeignKey("OrgainizationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JusticeSector");

                    b.Navigation("OrgainizationDetail");
                });

            modelBuilder.Entity("Pidp.Models.PartyAccessAdministrator", b =>
                {
                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithOne("AccessAdministrator")
                        .HasForeignKey("Pidp.Models.PartyAccessAdministrator", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.PartyLicenceDeclaration", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeCode");

                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithOne("LicenceDeclaration")
                        .HasForeignKey("Pidp.Models.PartyLicenceDeclaration", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.PartyOrgainizationDetail", b =>
                {
                    b.HasOne("Pidp.Models.Lookups.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pidp.Models.Party", "Party")
                        .WithOne("OrgainizationDetail")
                        .HasForeignKey("Pidp.Models.PartyOrgainizationDetail", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pidp.Models.DigitalEvidence", b =>
                {
                    b.HasOne("Pidp.Models.AccessRequest", null)
                        .WithOne()
                        .HasForeignKey("Pidp.Models.DigitalEvidence", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pidp.Models.FacilityAddress", b =>
                {
                    b.HasOne("Pidp.Models.Facility", "Facility")
                        .WithOne("PhysicalAddress")
                        .HasForeignKey("Pidp.Models.FacilityAddress", "FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Pidp.Models.HcimAccountTransfer", b =>
                {
                    b.HasOne("Pidp.Models.AccessRequest", null)
                        .WithOne()
                        .HasForeignKey("Pidp.Models.HcimAccountTransfer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pidp.Models.HcimEnrolment", b =>
                {
                    b.HasOne("Pidp.Models.AccessRequest", null)
                        .WithOne()
                        .HasForeignKey("Pidp.Models.HcimEnrolment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pidp.Models.Endorsement", b =>
                {
                    b.Navigation("EndorsementRelationships");
                });

            modelBuilder.Entity("Pidp.Models.Facility", b =>
                {
                    b.Navigation("PhysicalAddress");
                });

            modelBuilder.Entity("Pidp.Models.Party", b =>
                {
                    b.Navigation("AccessAdministrator");

                    b.Navigation("AccessRequests");

                    b.Navigation("Facility");

                    b.Navigation("LicenceDeclaration");

                    b.Navigation("OrgainizationDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
